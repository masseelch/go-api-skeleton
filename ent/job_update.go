// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/masseelch/go-api-skeleton/ent/job"
	"github.com/masseelch/go-api-skeleton/ent/predicate"
	"github.com/masseelch/go-api-skeleton/ent/user"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks      []Hook
	mutation   *JobMutation
	predicates []predicate.Job
}

// Where adds a new predicate for the builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.predicates = append(ju.predicates, ps...)
	return ju
}

// SetDate sets the date field.
func (ju *JobUpdate) SetDate(t time.Time) *JobUpdate {
	ju.mutation.SetDate(t)
	return ju
}

// SetNillableDate sets the date field if the given value is not nil.
func (ju *JobUpdate) SetNillableDate(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetDate(*t)
	}
	return ju
}

// ClearDate clears the value of date.
func (ju *JobUpdate) ClearDate() *JobUpdate {
	ju.mutation.ClearDate()
	return ju
}

// SetTask sets the task field.
func (ju *JobUpdate) SetTask(s string) *JobUpdate {
	ju.mutation.SetTask(s)
	return ju
}

// SetNillableTask sets the task field if the given value is not nil.
func (ju *JobUpdate) SetNillableTask(s *string) *JobUpdate {
	if s != nil {
		ju.SetTask(*s)
	}
	return ju
}

// ClearTask clears the value of task.
func (ju *JobUpdate) ClearTask() *JobUpdate {
	ju.mutation.ClearTask()
	return ju
}

// SetState sets the state field.
func (ju *JobUpdate) SetState(s string) *JobUpdate {
	ju.mutation.SetState(s)
	return ju
}

// SetNillableState sets the state field if the given value is not nil.
func (ju *JobUpdate) SetNillableState(s *string) *JobUpdate {
	if s != nil {
		ju.SetState(*s)
	}
	return ju
}

// SetReport sets the report field.
func (ju *JobUpdate) SetReport(s string) *JobUpdate {
	ju.mutation.SetReport(s)
	return ju
}

// SetNillableReport sets the report field if the given value is not nil.
func (ju *JobUpdate) SetNillableReport(s *string) *JobUpdate {
	if s != nil {
		ju.SetReport(*s)
	}
	return ju
}

// ClearReport clears the value of report.
func (ju *JobUpdate) ClearReport() *JobUpdate {
	ju.mutation.ClearReport()
	return ju
}

// SetRest sets the rest field.
func (ju *JobUpdate) SetRest(s string) *JobUpdate {
	ju.mutation.SetRest(s)
	return ju
}

// SetNillableRest sets the rest field if the given value is not nil.
func (ju *JobUpdate) SetNillableRest(s *string) *JobUpdate {
	if s != nil {
		ju.SetRest(*s)
	}
	return ju
}

// ClearRest clears the value of rest.
func (ju *JobUpdate) ClearRest() *JobUpdate {
	ju.mutation.ClearRest()
	return ju
}

// SetNote sets the note field.
func (ju *JobUpdate) SetNote(s string) *JobUpdate {
	ju.mutation.SetNote(s)
	return ju
}

// SetNillableNote sets the note field if the given value is not nil.
func (ju *JobUpdate) SetNillableNote(s *string) *JobUpdate {
	if s != nil {
		ju.SetNote(*s)
	}
	return ju
}

// ClearNote clears the value of note.
func (ju *JobUpdate) ClearNote() *JobUpdate {
	ju.mutation.ClearNote()
	return ju
}

// SetCustomerName sets the customerName field.
func (ju *JobUpdate) SetCustomerName(s string) *JobUpdate {
	ju.mutation.SetCustomerName(s)
	return ju
}

// SetNillableCustomerName sets the customerName field if the given value is not nil.
func (ju *JobUpdate) SetNillableCustomerName(s *string) *JobUpdate {
	if s != nil {
		ju.SetCustomerName(*s)
	}
	return ju
}

// ClearCustomerName clears the value of customerName.
func (ju *JobUpdate) ClearCustomerName() *JobUpdate {
	ju.mutation.ClearCustomerName()
	return ju
}

// SetRiskAssessmentRequired sets the riskAssessmentRequired field.
func (ju *JobUpdate) SetRiskAssessmentRequired(b bool) *JobUpdate {
	ju.mutation.SetRiskAssessmentRequired(b)
	return ju
}

// SetNillableRiskAssessmentRequired sets the riskAssessmentRequired field if the given value is not nil.
func (ju *JobUpdate) SetNillableRiskAssessmentRequired(b *bool) *JobUpdate {
	if b != nil {
		ju.SetRiskAssessmentRequired(*b)
	}
	return ju
}

// SetMaintenanceRequired sets the maintenanceRequired field.
func (ju *JobUpdate) SetMaintenanceRequired(b bool) *JobUpdate {
	ju.mutation.SetMaintenanceRequired(b)
	return ju
}

// SetNillableMaintenanceRequired sets the maintenanceRequired field if the given value is not nil.
func (ju *JobUpdate) SetNillableMaintenanceRequired(b *bool) *JobUpdate {
	if b != nil {
		ju.SetMaintenanceRequired(*b)
	}
	return ju
}

// AddUserIDs adds the users edge to User by ids.
func (ju *JobUpdate) AddUserIDs(ids ...int) *JobUpdate {
	ju.mutation.AddUserIDs(ids...)
	return ju
}

// AddUsers adds the users edges to User.
func (ju *JobUpdate) AddUsers(u ...*User) *JobUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ju.AddUserIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearUsers clears all "users" edges to type User.
func (ju *JobUpdate) ClearUsers() *JobUpdate {
	ju.mutation.ClearUsers()
	return ju
}

// RemoveUserIDs removes the users edge to User by ids.
func (ju *JobUpdate) RemoveUserIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveUserIDs(ids...)
	return ju
}

// RemoveUsers removes users edges to User.
func (ju *JobUpdate) RemoveUsers(u ...*User) *JobUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ju.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ju.hooks) == 0 {
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	if ps := ju.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldDate,
		})
	}
	if ju.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: job.FieldDate,
		})
	}
	if value, ok := ju.mutation.Task(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldTask,
		})
	}
	if ju.mutation.TaskCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldTask,
		})
	}
	if value, ok := ju.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldState,
		})
	}
	if value, ok := ju.mutation.Report(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldReport,
		})
	}
	if ju.mutation.ReportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldReport,
		})
	}
	if value, ok := ju.mutation.Rest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldRest,
		})
	}
	if ju.mutation.RestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldRest,
		})
	}
	if value, ok := ju.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldNote,
		})
	}
	if ju.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldNote,
		})
	}
	if value, ok := ju.mutation.CustomerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCustomerName,
		})
	}
	if ju.mutation.CustomerNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldCustomerName,
		})
	}
	if value, ok := ju.mutation.RiskAssessmentRequired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldRiskAssessmentRequired,
		})
	}
	if value, ok := ju.mutation.MaintenanceRequired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldMaintenanceRequired,
		})
	}
	if ju.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.UsersTable,
			Columns: job.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ju.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.UsersTable,
			Columns: job.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.UsersTable,
			Columns: job.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// SetDate sets the date field.
func (juo *JobUpdateOne) SetDate(t time.Time) *JobUpdateOne {
	juo.mutation.SetDate(t)
	return juo
}

// SetNillableDate sets the date field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableDate(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetDate(*t)
	}
	return juo
}

// ClearDate clears the value of date.
func (juo *JobUpdateOne) ClearDate() *JobUpdateOne {
	juo.mutation.ClearDate()
	return juo
}

// SetTask sets the task field.
func (juo *JobUpdateOne) SetTask(s string) *JobUpdateOne {
	juo.mutation.SetTask(s)
	return juo
}

// SetNillableTask sets the task field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableTask(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetTask(*s)
	}
	return juo
}

// ClearTask clears the value of task.
func (juo *JobUpdateOne) ClearTask() *JobUpdateOne {
	juo.mutation.ClearTask()
	return juo
}

// SetState sets the state field.
func (juo *JobUpdateOne) SetState(s string) *JobUpdateOne {
	juo.mutation.SetState(s)
	return juo
}

// SetNillableState sets the state field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableState(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetState(*s)
	}
	return juo
}

// SetReport sets the report field.
func (juo *JobUpdateOne) SetReport(s string) *JobUpdateOne {
	juo.mutation.SetReport(s)
	return juo
}

// SetNillableReport sets the report field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableReport(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetReport(*s)
	}
	return juo
}

// ClearReport clears the value of report.
func (juo *JobUpdateOne) ClearReport() *JobUpdateOne {
	juo.mutation.ClearReport()
	return juo
}

// SetRest sets the rest field.
func (juo *JobUpdateOne) SetRest(s string) *JobUpdateOne {
	juo.mutation.SetRest(s)
	return juo
}

// SetNillableRest sets the rest field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRest(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetRest(*s)
	}
	return juo
}

// ClearRest clears the value of rest.
func (juo *JobUpdateOne) ClearRest() *JobUpdateOne {
	juo.mutation.ClearRest()
	return juo
}

// SetNote sets the note field.
func (juo *JobUpdateOne) SetNote(s string) *JobUpdateOne {
	juo.mutation.SetNote(s)
	return juo
}

// SetNillableNote sets the note field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableNote(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetNote(*s)
	}
	return juo
}

// ClearNote clears the value of note.
func (juo *JobUpdateOne) ClearNote() *JobUpdateOne {
	juo.mutation.ClearNote()
	return juo
}

// SetCustomerName sets the customerName field.
func (juo *JobUpdateOne) SetCustomerName(s string) *JobUpdateOne {
	juo.mutation.SetCustomerName(s)
	return juo
}

// SetNillableCustomerName sets the customerName field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCustomerName(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCustomerName(*s)
	}
	return juo
}

// ClearCustomerName clears the value of customerName.
func (juo *JobUpdateOne) ClearCustomerName() *JobUpdateOne {
	juo.mutation.ClearCustomerName()
	return juo
}

// SetRiskAssessmentRequired sets the riskAssessmentRequired field.
func (juo *JobUpdateOne) SetRiskAssessmentRequired(b bool) *JobUpdateOne {
	juo.mutation.SetRiskAssessmentRequired(b)
	return juo
}

// SetNillableRiskAssessmentRequired sets the riskAssessmentRequired field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRiskAssessmentRequired(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetRiskAssessmentRequired(*b)
	}
	return juo
}

// SetMaintenanceRequired sets the maintenanceRequired field.
func (juo *JobUpdateOne) SetMaintenanceRequired(b bool) *JobUpdateOne {
	juo.mutation.SetMaintenanceRequired(b)
	return juo
}

// SetNillableMaintenanceRequired sets the maintenanceRequired field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableMaintenanceRequired(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetMaintenanceRequired(*b)
	}
	return juo
}

// AddUserIDs adds the users edge to User by ids.
func (juo *JobUpdateOne) AddUserIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddUserIDs(ids...)
	return juo
}

// AddUsers adds the users edges to User.
func (juo *JobUpdateOne) AddUsers(u ...*User) *JobUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return juo.AddUserIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearUsers clears all "users" edges to type User.
func (juo *JobUpdateOne) ClearUsers() *JobUpdateOne {
	juo.mutation.ClearUsers()
	return juo
}

// RemoveUserIDs removes the users edge to User by ids.
func (juo *JobUpdateOne) RemoveUserIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveUserIDs(ids...)
	return juo
}

// RemoveUsers removes users edges to User.
func (juo *JobUpdateOne) RemoveUsers(u ...*User) *JobUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return juo.RemoveUserIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	if len(juo.hooks) == 0 {
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			mut = juo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, juo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Job.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := juo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldDate,
		})
	}
	if juo.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: job.FieldDate,
		})
	}
	if value, ok := juo.mutation.Task(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldTask,
		})
	}
	if juo.mutation.TaskCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldTask,
		})
	}
	if value, ok := juo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldState,
		})
	}
	if value, ok := juo.mutation.Report(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldReport,
		})
	}
	if juo.mutation.ReportCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldReport,
		})
	}
	if value, ok := juo.mutation.Rest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldRest,
		})
	}
	if juo.mutation.RestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldRest,
		})
	}
	if value, ok := juo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldNote,
		})
	}
	if juo.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldNote,
		})
	}
	if value, ok := juo.mutation.CustomerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCustomerName,
		})
	}
	if juo.mutation.CustomerNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: job.FieldCustomerName,
		})
	}
	if value, ok := juo.mutation.RiskAssessmentRequired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldRiskAssessmentRequired,
		})
	}
	if value, ok := juo.mutation.MaintenanceRequired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: job.FieldMaintenanceRequired,
		})
	}
	if juo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.UsersTable,
			Columns: job.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !juo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.UsersTable,
			Columns: job.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   job.UsersTable,
			Columns: job.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
