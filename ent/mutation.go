// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/masseelch/go-api-skeleton/ent/job"
	"github.com/masseelch/go-api-skeleton/ent/predicate"
	"github.com/masseelch/go-api-skeleton/ent/session"
	"github.com/masseelch/go-api-skeleton/ent/user"
	go_token "github.com/masseelch/go-token"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeJob     = "Job"
	TypeSession = "Session"
	TypeUser    = "User"
)

// JobMutation represents an operation that mutate the Jobs
// nodes in the graph.
type JobMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	date                   *time.Time
	task                   *string
	state                  *string
	report                 *string
	rest                   *string
	note                   *string
	customerName           *string
	riskAssessmentRequired *bool
	maintenanceRequired    *bool
	clearedFields          map[string]struct{}
	users                  map[int]struct{}
	removedusers           map[int]struct{}
	clearedusers           bool
	done                   bool
	oldValue               func(context.Context) (*Job, error)
	predicates             []predicate.Job
}

var _ ent.Mutation = (*JobMutation)(nil)

// jobOption allows to manage the mutation configuration using functional options.
type jobOption func(*JobMutation)

// newJobMutation creates new mutation for $n.Name.
func newJobMutation(c config, op Op, opts ...jobOption) *JobMutation {
	m := &JobMutation{
		config:        c,
		op:            op,
		typ:           TypeJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobID sets the id field of the mutation.
func withJobID(id int) jobOption {
	return func(m *JobMutation) {
		var (
			err   error
			once  sync.Once
			value *Job
		)
		m.oldValue = func(ctx context.Context) (*Job, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Job.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJob sets the old Job of the mutation.
func withJob(node *Job) jobOption {
	return func(m *JobMutation) {
		m.oldValue = func(context.Context) (*Job, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Job creation.
func (m *JobMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *JobMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDate sets the date field.
func (m *JobMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the date value in the mutation.
func (m *JobMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old date value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of date.
func (m *JobMutation) ClearDate() {
	m.date = nil
	m.clearedFields[job.FieldDate] = struct{}{}
}

// DateCleared returns if the field date was cleared in this mutation.
func (m *JobMutation) DateCleared() bool {
	_, ok := m.clearedFields[job.FieldDate]
	return ok
}

// ResetDate reset all changes of the "date" field.
func (m *JobMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, job.FieldDate)
}

// SetTask sets the task field.
func (m *JobMutation) SetTask(s string) {
	m.task = &s
}

// Task returns the task value in the mutation.
func (m *JobMutation) Task() (r string, exists bool) {
	v := m.task
	if v == nil {
		return
	}
	return *v, true
}

// OldTask returns the old task value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldTask(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTask is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTask requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTask: %w", err)
	}
	return oldValue.Task, nil
}

// ClearTask clears the value of task.
func (m *JobMutation) ClearTask() {
	m.task = nil
	m.clearedFields[job.FieldTask] = struct{}{}
}

// TaskCleared returns if the field task was cleared in this mutation.
func (m *JobMutation) TaskCleared() bool {
	_, ok := m.clearedFields[job.FieldTask]
	return ok
}

// ResetTask reset all changes of the "task" field.
func (m *JobMutation) ResetTask() {
	m.task = nil
	delete(m.clearedFields, job.FieldTask)
}

// SetState sets the state field.
func (m *JobMutation) SetState(s string) {
	m.state = &s
}

// State returns the state value in the mutation.
func (m *JobMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old state value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState reset all changes of the "state" field.
func (m *JobMutation) ResetState() {
	m.state = nil
}

// SetReport sets the report field.
func (m *JobMutation) SetReport(s string) {
	m.report = &s
}

// Report returns the report value in the mutation.
func (m *JobMutation) Report() (r string, exists bool) {
	v := m.report
	if v == nil {
		return
	}
	return *v, true
}

// OldReport returns the old report value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldReport(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReport is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReport requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReport: %w", err)
	}
	return oldValue.Report, nil
}

// ClearReport clears the value of report.
func (m *JobMutation) ClearReport() {
	m.report = nil
	m.clearedFields[job.FieldReport] = struct{}{}
}

// ReportCleared returns if the field report was cleared in this mutation.
func (m *JobMutation) ReportCleared() bool {
	_, ok := m.clearedFields[job.FieldReport]
	return ok
}

// ResetReport reset all changes of the "report" field.
func (m *JobMutation) ResetReport() {
	m.report = nil
	delete(m.clearedFields, job.FieldReport)
}

// SetRest sets the rest field.
func (m *JobMutation) SetRest(s string) {
	m.rest = &s
}

// Rest returns the rest value in the mutation.
func (m *JobMutation) Rest() (r string, exists bool) {
	v := m.rest
	if v == nil {
		return
	}
	return *v, true
}

// OldRest returns the old rest value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldRest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRest is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRest: %w", err)
	}
	return oldValue.Rest, nil
}

// ClearRest clears the value of rest.
func (m *JobMutation) ClearRest() {
	m.rest = nil
	m.clearedFields[job.FieldRest] = struct{}{}
}

// RestCleared returns if the field rest was cleared in this mutation.
func (m *JobMutation) RestCleared() bool {
	_, ok := m.clearedFields[job.FieldRest]
	return ok
}

// ResetRest reset all changes of the "rest" field.
func (m *JobMutation) ResetRest() {
	m.rest = nil
	delete(m.clearedFields, job.FieldRest)
}

// SetNote sets the note field.
func (m *JobMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the note value in the mutation.
func (m *JobMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old note value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNote is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ClearNote clears the value of note.
func (m *JobMutation) ClearNote() {
	m.note = nil
	m.clearedFields[job.FieldNote] = struct{}{}
}

// NoteCleared returns if the field note was cleared in this mutation.
func (m *JobMutation) NoteCleared() bool {
	_, ok := m.clearedFields[job.FieldNote]
	return ok
}

// ResetNote reset all changes of the "note" field.
func (m *JobMutation) ResetNote() {
	m.note = nil
	delete(m.clearedFields, job.FieldNote)
}

// SetCustomerName sets the customerName field.
func (m *JobMutation) SetCustomerName(s string) {
	m.customerName = &s
}

// CustomerName returns the customerName value in the mutation.
func (m *JobMutation) CustomerName() (r string, exists bool) {
	v := m.customerName
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerName returns the old customerName value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldCustomerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomerName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerName: %w", err)
	}
	return oldValue.CustomerName, nil
}

// ClearCustomerName clears the value of customerName.
func (m *JobMutation) ClearCustomerName() {
	m.customerName = nil
	m.clearedFields[job.FieldCustomerName] = struct{}{}
}

// CustomerNameCleared returns if the field customerName was cleared in this mutation.
func (m *JobMutation) CustomerNameCleared() bool {
	_, ok := m.clearedFields[job.FieldCustomerName]
	return ok
}

// ResetCustomerName reset all changes of the "customerName" field.
func (m *JobMutation) ResetCustomerName() {
	m.customerName = nil
	delete(m.clearedFields, job.FieldCustomerName)
}

// SetRiskAssessmentRequired sets the riskAssessmentRequired field.
func (m *JobMutation) SetRiskAssessmentRequired(b bool) {
	m.riskAssessmentRequired = &b
}

// RiskAssessmentRequired returns the riskAssessmentRequired value in the mutation.
func (m *JobMutation) RiskAssessmentRequired() (r bool, exists bool) {
	v := m.riskAssessmentRequired
	if v == nil {
		return
	}
	return *v, true
}

// OldRiskAssessmentRequired returns the old riskAssessmentRequired value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldRiskAssessmentRequired(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRiskAssessmentRequired is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRiskAssessmentRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiskAssessmentRequired: %w", err)
	}
	return oldValue.RiskAssessmentRequired, nil
}

// ResetRiskAssessmentRequired reset all changes of the "riskAssessmentRequired" field.
func (m *JobMutation) ResetRiskAssessmentRequired() {
	m.riskAssessmentRequired = nil
}

// SetMaintenanceRequired sets the maintenanceRequired field.
func (m *JobMutation) SetMaintenanceRequired(b bool) {
	m.maintenanceRequired = &b
}

// MaintenanceRequired returns the maintenanceRequired value in the mutation.
func (m *JobMutation) MaintenanceRequired() (r bool, exists bool) {
	v := m.maintenanceRequired
	if v == nil {
		return
	}
	return *v, true
}

// OldMaintenanceRequired returns the old maintenanceRequired value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldMaintenanceRequired(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMaintenanceRequired is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMaintenanceRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaintenanceRequired: %w", err)
	}
	return oldValue.MaintenanceRequired, nil
}

// ResetMaintenanceRequired reset all changes of the "maintenanceRequired" field.
func (m *JobMutation) ResetMaintenanceRequired() {
	m.maintenanceRequired = nil
}

// AddUserIDs adds the users edge to User by ids.
func (m *JobMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the users edge to User.
func (m *JobMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared returns if the edge users was cleared.
func (m *JobMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the users edge to User by ids.
func (m *JobMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed ids of users.
func (m *JobMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the users ids in the mutation.
func (m *JobMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers reset all changes of the "users" edge.
func (m *JobMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Op returns the operation name.
func (m *JobMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Job).
func (m *JobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *JobMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.date != nil {
		fields = append(fields, job.FieldDate)
	}
	if m.task != nil {
		fields = append(fields, job.FieldTask)
	}
	if m.state != nil {
		fields = append(fields, job.FieldState)
	}
	if m.report != nil {
		fields = append(fields, job.FieldReport)
	}
	if m.rest != nil {
		fields = append(fields, job.FieldRest)
	}
	if m.note != nil {
		fields = append(fields, job.FieldNote)
	}
	if m.customerName != nil {
		fields = append(fields, job.FieldCustomerName)
	}
	if m.riskAssessmentRequired != nil {
		fields = append(fields, job.FieldRiskAssessmentRequired)
	}
	if m.maintenanceRequired != nil {
		fields = append(fields, job.FieldMaintenanceRequired)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *JobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case job.FieldDate:
		return m.Date()
	case job.FieldTask:
		return m.Task()
	case job.FieldState:
		return m.State()
	case job.FieldReport:
		return m.Report()
	case job.FieldRest:
		return m.Rest()
	case job.FieldNote:
		return m.Note()
	case job.FieldCustomerName:
		return m.CustomerName()
	case job.FieldRiskAssessmentRequired:
		return m.RiskAssessmentRequired()
	case job.FieldMaintenanceRequired:
		return m.MaintenanceRequired()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *JobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case job.FieldDate:
		return m.OldDate(ctx)
	case job.FieldTask:
		return m.OldTask(ctx)
	case job.FieldState:
		return m.OldState(ctx)
	case job.FieldReport:
		return m.OldReport(ctx)
	case job.FieldRest:
		return m.OldRest(ctx)
	case job.FieldNote:
		return m.OldNote(ctx)
	case job.FieldCustomerName:
		return m.OldCustomerName(ctx)
	case job.FieldRiskAssessmentRequired:
		return m.OldRiskAssessmentRequired(ctx)
	case job.FieldMaintenanceRequired:
		return m.OldMaintenanceRequired(ctx)
	}
	return nil, fmt.Errorf("unknown Job field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case job.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case job.FieldTask:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTask(v)
		return nil
	case job.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case job.FieldReport:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReport(v)
		return nil
	case job.FieldRest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRest(v)
		return nil
	case job.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case job.FieldCustomerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerName(v)
		return nil
	case job.FieldRiskAssessmentRequired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiskAssessmentRequired(v)
		return nil
	case job.FieldMaintenanceRequired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaintenanceRequired(v)
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *JobMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *JobMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Job numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *JobMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(job.FieldDate) {
		fields = append(fields, job.FieldDate)
	}
	if m.FieldCleared(job.FieldTask) {
		fields = append(fields, job.FieldTask)
	}
	if m.FieldCleared(job.FieldReport) {
		fields = append(fields, job.FieldReport)
	}
	if m.FieldCleared(job.FieldRest) {
		fields = append(fields, job.FieldRest)
	}
	if m.FieldCleared(job.FieldNote) {
		fields = append(fields, job.FieldNote)
	}
	if m.FieldCleared(job.FieldCustomerName) {
		fields = append(fields, job.FieldCustomerName)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *JobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobMutation) ClearField(name string) error {
	switch name {
	case job.FieldDate:
		m.ClearDate()
		return nil
	case job.FieldTask:
		m.ClearTask()
		return nil
	case job.FieldReport:
		m.ClearReport()
		return nil
	case job.FieldRest:
		m.ClearRest()
		return nil
	case job.FieldNote:
		m.ClearNote()
		return nil
	case job.FieldCustomerName:
		m.ClearCustomerName()
		return nil
	}
	return fmt.Errorf("unknown Job nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *JobMutation) ResetField(name string) error {
	switch name {
	case job.FieldDate:
		m.ResetDate()
		return nil
	case job.FieldTask:
		m.ResetTask()
		return nil
	case job.FieldState:
		m.ResetState()
		return nil
	case job.FieldReport:
		m.ResetReport()
		return nil
	case job.FieldRest:
		m.ResetRest()
		return nil
	case job.FieldNote:
		m.ResetNote()
		return nil
	case job.FieldCustomerName:
		m.ResetCustomerName()
		return nil
	case job.FieldRiskAssessmentRequired:
		m.ResetRiskAssessmentRequired()
		return nil
	case job.FieldMaintenanceRequired:
		m.ResetMaintenanceRequired()
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *JobMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, job.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *JobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *JobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, job.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *JobMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *JobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, job.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *JobMutation) EdgeCleared(name string) bool {
	switch name {
	case job.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *JobMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Job unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *JobMutation) ResetEdge(name string) error {
	switch name {
	case job.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Job edge %s", name)
}

// SessionMutation represents an operation that mutate the Sessions
// nodes in the graph.
type SessionMutation struct {
	config
	op                Op
	typ               string
	id                *go_token.Token
	idleTimeExpiredAt *time.Time
	lifeTimeExpiredAt *time.Time
	clearedFields     map[string]struct{}
	user              *int
	cleareduser       bool
	done              bool
	oldValue          func(context.Context) (*Session, error)
	predicates        []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows to manage the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for $n.Name.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the id field of the mutation.
func withSessionID(id go_token.Token) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Session creation.
func (m *SessionMutation) SetID(id go_token.Token) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SessionMutation) ID() (id go_token.Token, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIdleTimeExpiredAt sets the idleTimeExpiredAt field.
func (m *SessionMutation) SetIdleTimeExpiredAt(t time.Time) {
	m.idleTimeExpiredAt = &t
}

// IdleTimeExpiredAt returns the idleTimeExpiredAt value in the mutation.
func (m *SessionMutation) IdleTimeExpiredAt() (r time.Time, exists bool) {
	v := m.idleTimeExpiredAt
	if v == nil {
		return
	}
	return *v, true
}

// OldIdleTimeExpiredAt returns the old idleTimeExpiredAt value of the Session.
// If the Session object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SessionMutation) OldIdleTimeExpiredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdleTimeExpiredAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdleTimeExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdleTimeExpiredAt: %w", err)
	}
	return oldValue.IdleTimeExpiredAt, nil
}

// ResetIdleTimeExpiredAt reset all changes of the "idleTimeExpiredAt" field.
func (m *SessionMutation) ResetIdleTimeExpiredAt() {
	m.idleTimeExpiredAt = nil
}

// SetLifeTimeExpiredAt sets the lifeTimeExpiredAt field.
func (m *SessionMutation) SetLifeTimeExpiredAt(t time.Time) {
	m.lifeTimeExpiredAt = &t
}

// LifeTimeExpiredAt returns the lifeTimeExpiredAt value in the mutation.
func (m *SessionMutation) LifeTimeExpiredAt() (r time.Time, exists bool) {
	v := m.lifeTimeExpiredAt
	if v == nil {
		return
	}
	return *v, true
}

// OldLifeTimeExpiredAt returns the old lifeTimeExpiredAt value of the Session.
// If the Session object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SessionMutation) OldLifeTimeExpiredAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLifeTimeExpiredAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLifeTimeExpiredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLifeTimeExpiredAt: %w", err)
	}
	return oldValue.LifeTimeExpiredAt, nil
}

// ResetLifeTimeExpiredAt reset all changes of the "lifeTimeExpiredAt" field.
func (m *SessionMutation) ResetLifeTimeExpiredAt() {
	m.lifeTimeExpiredAt = nil
}

// SetUserID sets the user edge to User by id.
func (m *SessionMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *SessionMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.idleTimeExpiredAt != nil {
		fields = append(fields, session.FieldIdleTimeExpiredAt)
	}
	if m.lifeTimeExpiredAt != nil {
		fields = append(fields, session.FieldLifeTimeExpiredAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldIdleTimeExpiredAt:
		return m.IdleTimeExpiredAt()
	case session.FieldLifeTimeExpiredAt:
		return m.LifeTimeExpiredAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldIdleTimeExpiredAt:
		return m.OldIdleTimeExpiredAt(ctx)
	case session.FieldLifeTimeExpiredAt:
		return m.OldLifeTimeExpiredAt(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldIdleTimeExpiredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdleTimeExpiredAt(v)
		return nil
	case session.FieldLifeTimeExpiredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLifeTimeExpiredAt(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldIdleTimeExpiredAt:
		m.ResetIdleTimeExpiredAt()
		return nil
	case session.FieldLifeTimeExpiredAt:
		m.ResetLifeTimeExpiredAt()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	email           *string
	password        *string
	enabled         *bool
	clearedFields   map[string]struct{}
	sessions        map[go_token.Token]struct{}
	removedsessions map[go_token.Token]struct{}
	clearedsessions bool
	jobs            map[int]struct{}
	removedjobs     map[int]struct{}
	clearedjobs     bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on User creation.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEnabled sets the enabled field.
func (m *UserMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the enabled value in the mutation.
func (m *UserMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old enabled value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnabled is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled reset all changes of the "enabled" field.
func (m *UserMutation) ResetEnabled() {
	m.enabled = nil
}

// AddSessionIDs adds the sessions edge to Session by ids.
func (m *UserMutation) AddSessionIDs(ids ...go_token.Token) {
	if m.sessions == nil {
		m.sessions = make(map[go_token.Token]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the sessions edge to Session.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared returns if the edge sessions was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the sessions edge to Session by ids.
func (m *UserMutation) RemoveSessionIDs(ids ...go_token.Token) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[go_token.Token]struct{})
	}
	for i := range ids {
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed ids of sessions.
func (m *UserMutation) RemovedSessionsIDs() (ids []go_token.Token) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the sessions ids in the mutation.
func (m *UserMutation) SessionsIDs() (ids []go_token.Token) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions reset all changes of the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddJobIDs adds the jobs edge to Job by ids.
func (m *UserMutation) AddJobIDs(ids ...int) {
	if m.jobs == nil {
		m.jobs = make(map[int]struct{})
	}
	for i := range ids {
		m.jobs[ids[i]] = struct{}{}
	}
}

// ClearJobs clears the jobs edge to Job.
func (m *UserMutation) ClearJobs() {
	m.clearedjobs = true
}

// JobsCleared returns if the edge jobs was cleared.
func (m *UserMutation) JobsCleared() bool {
	return m.clearedjobs
}

// RemoveJobIDs removes the jobs edge to Job by ids.
func (m *UserMutation) RemoveJobIDs(ids ...int) {
	if m.removedjobs == nil {
		m.removedjobs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedjobs[ids[i]] = struct{}{}
	}
}

// RemovedJobs returns the removed ids of jobs.
func (m *UserMutation) RemovedJobsIDs() (ids []int) {
	for id := range m.removedjobs {
		ids = append(ids, id)
	}
	return
}

// JobsIDs returns the jobs ids in the mutation.
func (m *UserMutation) JobsIDs() (ids []int) {
	for id := range m.jobs {
		ids = append(ids, id)
	}
	return
}

// ResetJobs reset all changes of the "jobs" edge.
func (m *UserMutation) ResetJobs() {
	m.jobs = nil
	m.clearedjobs = false
	m.removedjobs = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.enabled != nil {
		fields = append(fields, user.FieldEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEnabled:
		return m.Enabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEnabled:
		return m.OldEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEnabled:
		m.ResetEnabled()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.jobs != nil {
		edges = append(edges, user.EdgeJobs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeJobs:
		ids := make([]ent.Value, 0, len(m.jobs))
		for id := range m.jobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedjobs != nil {
		edges = append(edges, user.EdgeJobs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeJobs:
		ids := make([]ent.Value, 0, len(m.removedjobs))
		for id := range m.removedjobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedjobs {
		edges = append(edges, user.EdgeJobs)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeJobs:
		return m.clearedjobs
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeJobs:
		m.ResetJobs()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
