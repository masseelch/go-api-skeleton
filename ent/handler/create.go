// Code generated by entc, DO NOT EDIT.

package handler

import (
	"encoding/json"
	"net/http"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/liip/sheriff"
	"github.com/masseelch/render"
)

// struct to bind the post body to.
type jobCreateRequest struct {
	Date                   time.Time `json:"date,omitempty" groups:"job:list"`
	Task                   string    `json:"task,omitempty" groups:"job:list"`
	Report                 string    `json:"report,omitempty" groups:"job:list"`
	Rest                   string    `json:"rest,omitempty" groups:"job:list"`
	Note                   string    `json:"note,omitempty" groups:"job:list"`
	CustomerName           string    `json:"customerName,omitempty" groups:"job:list"`
	RiskAssessmentRequired bool      `json:"riskAssessmentRequired,omitempty" groups:"job:list"`
	MaintenanceRequired    bool      `json:"maintenanceRequired,omitempty" groups:"job:list"`
}

// This function creates a new Job model and stores it in the database.
func (h JobHandler) Create(w http.ResponseWriter, r *http.Request) {
	// Create builder.
	b := h.client.Job.Create()

	// Get the post data.
	body := jobCreateRequest{} // todo - allow form-url-encdoded/xml/protobuf data.
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		h.logger.WithError(err).Error("error decoding json")
		render.BadRequest(w, r, "invalid json string")
		return
	}

	// Validate the data.
	if err := h.validator.Struct(dest); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			h.logger.WithError(err).Error("error validating request data")
			render.InternalServerError(w, r, nil)
			return
		}

		h.logger.WithError(err).Info("validation failed")
		render.BadRequest(w, r, err)
		return
	}

	// Loop over the map and add the data to the builder.
	for k, e := range body {
		switch k {
		case "date":
			b = b.SetDate(e.(time.Time))
		case "task":
			b = b.SetTask(e.(string))
		case "state":
			b = b.SetState(e.(string))
		case "report":
			b = b.SetReport(e.(string))
		case "rest":
			b = b.SetRest(e.(string))
		case "note":
			b = b.SetNote(e.(string))
		case "customerName":
			b = b.SetCustomerName(e.(string))
		case "riskAssessmentRequired":
			b = b.SetRiskAssessmentRequired(e.(bool))
		case "maintenanceRequired":
			b = b.SetMaintenanceRequired(e.(bool))
		}
	}

	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("error saving Job")
		render.InternalServerError(w, r, nil)
		return
	}

	d, err := sheriff.Marshal(&sheriff.Options{Groups: []string{"job:create"}}, e)
	if err != nil {
		h.logger.WithError(err).WithField("Job.id", e.ID).Error("serialization error")
		render.InternalServerError(w, r, nil)
		return
	}

	h.logger.WithField("job", e.ID).Info("job rendered")
	render.OK(w, r, d)
}

// struct to bind the post body to.
type sessionCreateRequest struct {
	IdleTimeExpiredAt time.Time `json:"idleTimeExpiredAt,omitempty"`
	LifeTimeExpiredAt time.Time `json:"lifeTimeExpiredAt,omitempty"`
}

// This function creates a new Session model and stores it in the database.
func (h SessionHandler) Create(w http.ResponseWriter, r *http.Request) {
	// Create builder.
	b := h.client.Session.Create()

	// Get the post data.
	body := sessionCreateRequest{} // todo - allow form-url-encdoded/xml/protobuf data.
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		h.logger.WithError(err).Error("error decoding json")
		render.BadRequest(w, r, "invalid json string")
		return
	}

	// Validate the data.
	if err := h.validator.Struct(dest); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			h.logger.WithError(err).Error("error validating request data")
			render.InternalServerError(w, r, nil)
			return
		}

		h.logger.WithError(err).Info("validation failed")
		render.BadRequest(w, r, err)
		return
	}

	// Loop over the map and add the data to the builder.
	for k, e := range body {
		switch k {
		case "idleTimeExpiredAt":
			b = b.SetIdleTimeExpiredAt(e.(time.Time))
		case "lifeTimeExpiredAt":
			b = b.SetLifeTimeExpiredAt(e.(time.Time))
		}
	}

	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("error saving Session")
		render.InternalServerError(w, r, nil)
		return
	}

	d, err := sheriff.Marshal(&sheriff.Options{Groups: []string{"session:create"}}, e)
	if err != nil {
		h.logger.WithError(err).WithField("Session.id", e.ID).Error("serialization error")
		render.InternalServerError(w, r, nil)
		return
	}

	h.logger.WithField("session", e.ID).Info("job rendered")
	render.OK(w, r, d)
}

// struct to bind the post body to.
type userCreateRequest struct {
	Email    string `json:"email,omitempty" groups:"user:list"`
	Password string `json:"password,omitempty"`
	Enabled  bool   `json:"enabled,omitempty" groups:"user:list"`
}

// This function creates a new User model and stores it in the database.
func (h UserHandler) Create(w http.ResponseWriter, r *http.Request) {
	// Create builder.
	b := h.client.User.Create()

	// Get the post data.
	body := userCreateRequest{} // todo - allow form-url-encdoded/xml/protobuf data.
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		h.logger.WithError(err).Error("error decoding json")
		render.BadRequest(w, r, "invalid json string")
		return
	}

	// Validate the data.
	if err := h.validator.Struct(dest); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			h.logger.WithError(err).Error("error validating request data")
			render.InternalServerError(w, r, nil)
			return
		}

		h.logger.WithError(err).Info("validation failed")
		render.BadRequest(w, r, err)
		return
	}

	// Loop over the map and add the data to the builder.
	for k, e := range body {
		switch k {
		case "email":
			b = b.SetEmail(e.(string))
		case "password":
			b = b.SetPassword(e.(string))
		case "enabled":
			b = b.SetEnabled(e.(bool))
		}
	}

	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("error saving User")
		render.InternalServerError(w, r, nil)
		return
	}

	d, err := sheriff.Marshal(&sheriff.Options{Groups: []string{"user:create"}}, e)
	if err != nil {
		h.logger.WithError(err).WithField("User.id", e.ID).Error("serialization error")
		render.InternalServerError(w, r, nil)
		return
	}

	h.logger.WithField("user", e.ID).Info("job rendered")
	render.OK(w, r, d)
}
