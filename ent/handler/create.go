// Code generated by entc, DO NOT EDIT.

package handler

import (
	"encoding/json"
	"net/http"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/liip/sheriff"
	"github.com/masseelch/render"
)

// struct to bind the post body to.
type accountCreateRequest struct {
	Title string `json:"title,omitempty" `
	Users []int  `json:"users,omitempty" `
}

// This function creates a new Account model and stores it in the database.
func (h AccountHandler) Create(w http.ResponseWriter, r *http.Request) {
	// Get the post data.
	d := accountCreateRequest{} // todo - allow form-url-encdoded/xml/protobuf data.
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		h.logger.WithError(err).Error("error decoding json")
		render.BadRequest(w, r, "invalid json string")
		return
	}

	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			h.logger.WithError(err).Error("error validating request data")
			render.InternalServerError(w, r, nil)
			return
		}

		h.logger.WithError(err).Info("validation failed")
		render.BadRequest(w, r, err)
		return
	}

	// Save the data.
	b := h.client.Account.Create().
		SetTitle(d.Title).
		AddUserIDs(d.Users...)

	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("error saving Account")
		render.InternalServerError(w, r, nil)
		return
	}

	// Serialize the data.
	j, err := sheriff.Marshal(&sheriff.Options{Groups: []string{"account:read"}}, e)
	if err != nil {
		h.logger.WithError(err).WithField("Account.id", e.ID).Error("serialization error")
		render.InternalServerError(w, r, nil)
		return
	}

	h.logger.WithField("account", e.ID).Info("account rendered")
	render.OK(w, r, j)
}

// struct to bind the post body to.
type tagCreateRequest struct {
	Title       string `json:"title,omitempty" `
	Description string `json:"description,omitempty" `
}

// This function creates a new Tag model and stores it in the database.
func (h TagHandler) Create(w http.ResponseWriter, r *http.Request) {
	// Get the post data.
	d := tagCreateRequest{} // todo - allow form-url-encdoded/xml/protobuf data.
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		h.logger.WithError(err).Error("error decoding json")
		render.BadRequest(w, r, "invalid json string")
		return
	}

	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			h.logger.WithError(err).Error("error validating request data")
			render.InternalServerError(w, r, nil)
			return
		}

		h.logger.WithError(err).Info("validation failed")
		render.BadRequest(w, r, err)
		return
	}

	// Save the data.
	b := h.client.Tag.Create().
		SetTitle(d.Title).
		SetDescription(d.Description)

	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("error saving Tag")
		render.InternalServerError(w, r, nil)
		return
	}

	// Serialize the data.
	j, err := sheriff.Marshal(&sheriff.Options{Groups: []string{"tag:read"}}, e)
	if err != nil {
		h.logger.WithError(err).WithField("Tag.id", e.ID).Error("serialization error")
		render.InternalServerError(w, r, nil)
		return
	}

	h.logger.WithField("tag", e.ID).Info("tag rendered")
	render.OK(w, r, j)
}

// struct to bind the post body to.
type transactionCreateRequest struct {
	Date   time.Time `json:"date,omitempty" `
	Amount int       `json:"amount,omitempty" `
	User   int       `json:"" `
}

// This function creates a new Transaction model and stores it in the database.
func (h TransactionHandler) Create(w http.ResponseWriter, r *http.Request) {
	// Get the post data.
	d := transactionCreateRequest{} // todo - allow form-url-encdoded/xml/protobuf data.
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		h.logger.WithError(err).Error("error decoding json")
		render.BadRequest(w, r, "invalid json string")
		return
	}

	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			h.logger.WithError(err).Error("error validating request data")
			render.InternalServerError(w, r, nil)
			return
		}

		h.logger.WithError(err).Info("validation failed")
		render.BadRequest(w, r, err)
		return
	}

	// Save the data.
	b := h.client.Transaction.Create().
		SetDate(d.Date).
		SetAmount(d.Amount).
		SetUserID(d.User)

	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("error saving Transaction")
		render.InternalServerError(w, r, nil)
		return
	}

	// Serialize the data.
	j, err := sheriff.Marshal(&sheriff.Options{Groups: []string{"transaction:read"}}, e)
	if err != nil {
		h.logger.WithError(err).WithField("Transaction.id", e.ID).Error("serialization error")
		render.InternalServerError(w, r, nil)
		return
	}

	h.logger.WithField("transaction", e.ID).Info("transaction rendered")
	render.OK(w, r, j)
}

// struct to bind the post body to.
type userCreateRequest struct {
	Email    string `json:"email,omitempty" `
	Password string `json:"password,omitempty" `
	Enabled  bool   `json:"enabled,omitempty" `
}

// This function creates a new User model and stores it in the database.
func (h UserHandler) Create(w http.ResponseWriter, r *http.Request) {
	// Get the post data.
	d := userCreateRequest{} // todo - allow form-url-encdoded/xml/protobuf data.
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		h.logger.WithError(err).Error("error decoding json")
		render.BadRequest(w, r, "invalid json string")
		return
	}

	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			h.logger.WithError(err).Error("error validating request data")
			render.InternalServerError(w, r, nil)
			return
		}

		h.logger.WithError(err).Info("validation failed")
		render.BadRequest(w, r, err)
		return
	}

	// Save the data.
	b := h.client.User.Create().
		SetEmail(d.Email).
		SetPassword(d.Password).
		SetEnabled(d.Enabled)

	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("error saving User")
		render.InternalServerError(w, r, nil)
		return
	}

	// Serialize the data.
	j, err := sheriff.Marshal(&sheriff.Options{Groups: []string{"user:read"}}, e)
	if err != nil {
		h.logger.WithError(err).WithField("User.id", e.ID).Error("serialization error")
		render.InternalServerError(w, r, nil)
		return
	}

	h.logger.WithField("user", e.ID).Info("user rendered")
	render.OK(w, r, j)
}
