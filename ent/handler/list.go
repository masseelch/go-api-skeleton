// Code generated by entc, DO NOT EDIT.

package handler

import (
	"net/http"
	"strconv"

	"github.com/masseelch/render"
	"github.com/sirupsen/logrus"
)

// This function queries for Job models. Can be filtered by query parameters.
func (h JobHandler) List(w http.ResponseWriter, r *http.Request) {
	q := h.client.Job.Query().WithUsers()

	// Pagination. Default is 30 items per page.
	page, itemsPerPage, err := pagination(w, r, h.logger)
	if err != nil {
		return
	}
	q = q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	// Use the query parameters to filter the query.

	es, err := q.All(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("unexpected") // todo - better error
		render.InternalServerError(w, r, "logic")
		return

	}

	h.logger.WithField("amount", len(es)).Info("jobs rendered") // todo - better stuff here pls
	render.OK(w, r, es)
}

// This function queries for Session models. Can be filtered by query parameters.
func (h SessionHandler) List(w http.ResponseWriter, r *http.Request) {
	q := h.client.Session.Query()

	// Pagination. Default is 30 items per page.
	page, itemsPerPage, err := pagination(w, r, h.logger)
	if err != nil {
		return
	}
	q = q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	// Use the query parameters to filter the query.

	es, err := q.All(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("unexpected") // todo - better error
		render.InternalServerError(w, r, "logic")
		return

	}

	h.logger.WithField("amount", len(es)).Info("jobs rendered") // todo - better stuff here pls
	render.OK(w, r, es)
}

// This function queries for User models. Can be filtered by query parameters.
func (h UserHandler) List(w http.ResponseWriter, r *http.Request) {
	q := h.client.User.Query()

	// Pagination. Default is 30 items per page.
	page, itemsPerPage, err := pagination(w, r, h.logger)
	if err != nil {
		return
	}
	q = q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	// Use the query parameters to filter the query.

	es, err := q.All(r.Context())
	if err != nil {
		h.logger.WithError(err).Error("unexpected") // todo - better error
		render.InternalServerError(w, r, "logic")
		return

	}

	h.logger.WithField("amount", len(es)).Info("jobs rendered") // todo - better stuff here pls
	render.OK(w, r, es)
}

func pagination(w http.ResponseWriter, r *http.Request, l *logrus.Logger) (page int, itemsPerPage int, err error) {
	page = 1
	itemsPerPage = 30

	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.WithField("itemsPerPage", d).Info("error parsing query parameter 'itemsPerPage'")
			render.BadRequest(w, r, "itemsPerPage must be a positive integer greater zero")
			return
		}
	}

	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.WithField("page", d).Info("error parsing query parameter 'page'")
			render.BadRequest(w, r, "page must be a positive integer greater zero")
			return
		}
	}

	return
}
