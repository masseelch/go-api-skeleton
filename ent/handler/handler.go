// Code generated by entc, DO NOT EDIT.

package handler

import (
	"net/http"

	"github.com/go-chi/chi"
	"github.com/go-playground/validator/v10"
	"github.com/sirupsen/logrus"

	"github.com/masseelch/go-api-skeleton/ent"
)

// The GroupHandler.
type GroupHandler struct {
	r *chi.Mux

	client    *ent.Client
	validator *validator.Validate
	logger    *logrus.Logger
}

// Create a new GroupHandler
func NewGroupHandler(c *ent.Client, v *validator.Validate, log *logrus.Logger) *GroupHandler {
	return &GroupHandler{
		r:         chi.NewRouter(),
		client:    c,
		validator: v,
		logger:    log,
	}
}

// Implement the net/http Handler interface.
func (h GroupHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.r.ServeHTTP(w, r)
}

// Enable all endpoints.
func (h *GroupHandler) EnableAllEndpoints() *GroupHandler {
	h.EnableCreateEndpoint()
	h.EnableReadEndpoint()
	h.EnableListEndpoint()
	return h
}

// Enable the create operation.
func (h *GroupHandler) EnableCreateEndpoint() *GroupHandler {
	h.r.Post("/", h.Create)
	return h
}

// Enable the read operation.
func (h *GroupHandler) EnableReadEndpoint() *GroupHandler {
	h.r.Get("/{id:\\d+}", h.Read)
	return h
}

// Enable the list operation.
func (h *GroupHandler) EnableListEndpoint() *GroupHandler {
	h.r.Get("/", h.List)
	return h
}

// The JobHandler.
type JobHandler struct {
	r *chi.Mux

	client    *ent.Client
	validator *validator.Validate
	logger    *logrus.Logger
}

// Create a new JobHandler
func NewJobHandler(c *ent.Client, v *validator.Validate, log *logrus.Logger) *JobHandler {
	return &JobHandler{
		r:         chi.NewRouter(),
		client:    c,
		validator: v,
		logger:    log,
	}
}

// Implement the net/http Handler interface.
func (h JobHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.r.ServeHTTP(w, r)
}

// Enable all endpoints.
func (h *JobHandler) EnableAllEndpoints() *JobHandler {
	h.EnableCreateEndpoint()
	h.EnableReadEndpoint()
	h.EnableListEndpoint()
	return h
}

// Enable the create operation.
func (h *JobHandler) EnableCreateEndpoint() *JobHandler {
	h.r.Post("/", h.Create)
	return h
}

// Enable the read operation.
func (h *JobHandler) EnableReadEndpoint() *JobHandler {
	h.r.Get("/{id:\\d+}", h.Read)
	return h
}

// Enable the list operation.
func (h *JobHandler) EnableListEndpoint() *JobHandler {
	h.r.Get("/", h.List)
	return h
}

// The UserHandler.
type UserHandler struct {
	r *chi.Mux

	client    *ent.Client
	validator *validator.Validate
	logger    *logrus.Logger
}

// Create a new UserHandler
func NewUserHandler(c *ent.Client, v *validator.Validate, log *logrus.Logger) *UserHandler {
	return &UserHandler{
		r:         chi.NewRouter(),
		client:    c,
		validator: v,
		logger:    log,
	}
}

// Implement the net/http Handler interface.
func (h UserHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.r.ServeHTTP(w, r)
}

// Enable all endpoints.
func (h *UserHandler) EnableAllEndpoints() *UserHandler {
	h.EnableCreateEndpoint()
	h.EnableReadEndpoint()
	h.EnableListEndpoint()
	return h
}

// Enable the create operation.
func (h *UserHandler) EnableCreateEndpoint() *UserHandler {
	h.r.Post("/", h.Create)
	return h
}

// Enable the read operation.
func (h *UserHandler) EnableReadEndpoint() *UserHandler {
	h.r.Get("/{id:\\d+}", h.Read)
	return h
}

// Enable the list operation.
func (h *UserHandler) EnableListEndpoint() *UserHandler {
	h.r.Get("/", h.List)
	return h
}
