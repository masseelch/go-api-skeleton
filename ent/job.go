// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/masseelch/go-api-skeleton/ent/job"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Task holds the value of the "task" field.
	Task string `json:"task,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Report holds the value of the "report" field.
	Report string `json:"report,omitempty"`
	// Rest holds the value of the "rest" field.
	Rest string `json:"rest,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// CustomerName holds the value of the "customerName" field.
	CustomerName string `json:"customerName,omitempty"`
	// RiskAssessmentRequired holds the value of the "riskAssessmentRequired" field.
	RiskAssessmentRequired bool `json:"riskAssessmentRequired,omitempty"`
	// MaintenanceRequired holds the value of the "maintenanceRequired" field.
	MaintenanceRequired bool `json:"maintenanceRequired,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges JobEdges `json:"edges"`
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Users holds the value of the users edge.
	Users []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // date
		&sql.NullString{}, // task
		&sql.NullString{}, // state
		&sql.NullString{}, // report
		&sql.NullString{}, // rest
		&sql.NullString{}, // note
		&sql.NullString{}, // customerName
		&sql.NullBool{},   // riskAssessmentRequired
		&sql.NullBool{},   // maintenanceRequired
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(values ...interface{}) error {
	if m, n := len(values), len(job.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	j.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[0])
	} else if value.Valid {
		j.Date = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field task", values[1])
	} else if value.Valid {
		j.Task = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field state", values[2])
	} else if value.Valid {
		j.State = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field report", values[3])
	} else if value.Valid {
		j.Report = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field rest", values[4])
	} else if value.Valid {
		j.Rest = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field note", values[5])
	} else if value.Valid {
		j.Note = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field customerName", values[6])
	} else if value.Valid {
		j.CustomerName = value.String
	}
	if value, ok := values[7].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field riskAssessmentRequired", values[7])
	} else if value.Valid {
		j.RiskAssessmentRequired = value.Bool
	}
	if value, ok := values[8].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field maintenanceRequired", values[8])
	} else if value.Valid {
		j.MaintenanceRequired = value.Bool
	}
	return nil
}

// QueryUsers queries the users edge of the Job.
func (j *Job) QueryUsers() *UserQuery {
	return (&JobClient{config: j.config}).QueryUsers(j)
}

// Update returns a builder for updating this Job.
// Note that, you need to call Job.Unwrap() before calling this method, if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return (&JobClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v", j.ID))
	builder.WriteString(", date=")
	builder.WriteString(j.Date.Format(time.ANSIC))
	builder.WriteString(", task=")
	builder.WriteString(j.Task)
	builder.WriteString(", state=")
	builder.WriteString(j.State)
	builder.WriteString(", report=")
	builder.WriteString(j.Report)
	builder.WriteString(", rest=")
	builder.WriteString(j.Rest)
	builder.WriteString(", note=")
	builder.WriteString(j.Note)
	builder.WriteString(", customerName=")
	builder.WriteString(j.CustomerName)
	builder.WriteString(", riskAssessmentRequired=")
	builder.WriteString(fmt.Sprintf("%v", j.RiskAssessmentRequired))
	builder.WriteString(", maintenanceRequired=")
	builder.WriteString(fmt.Sprintf("%v", j.MaintenanceRequired))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

func (j Jobs) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
