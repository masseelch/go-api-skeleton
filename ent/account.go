// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/masseelch/go-api-skeleton/ent/account"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `groups:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty" groups:"account:list"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty" groups:"account:list"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges AccountEdges `json:"edges"`
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty" groups:"account:list,account:read"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // title
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(values ...interface{}) error {
	if m, n := len(values), len(account.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[0])
	} else if value.Valid {
		a.Title = value.String
	}
	return nil
}

// QueryUsers queries the users edge of the Account.
func (a *Account) QueryUsers() *UserQuery {
	return (&AccountClient{config: a.config}).QueryUsers(a)
}

// Update returns a builder for updating this Account.
// Note that, you need to call Account.Unwrap() before calling this method, if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// Get rid of the fmt.Stringer implementation since it breaks liip/sheriff.
// This lines have to be here since template/text does skip empty templates.

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
