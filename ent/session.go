// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/masseelch/go-api-skeleton/ent/session"
	"github.com/masseelch/go-api-skeleton/ent/user"
	"github.com/masseelch/go-token"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID token.Token `json:"token"`
	// IdleTimeExpiredAt holds the value of the "idleTimeExpiredAt" field.
	IdleTimeExpiredAt time.Time `json:"idleTimeExpiredAt,omitempty"`
	// LifeTimeExpiredAt holds the value of the "lifeTimeExpiredAt" field.
	LifeTimeExpiredAt time.Time `json:"lifeTimeExpiredAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionQuery when eager-loading is set.
	Edges         SessionEdges `json:"edges"`
	user_sessions *int
}

// SessionEdges holds the relations/edges for other nodes in the graph.
type SessionEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // idleTimeExpiredAt
		&sql.NullTime{},   // lifeTimeExpiredAt
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Session) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_sessions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(values ...interface{}) error {
	if m, n := len(values), len(session.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		s.ID = token.Token(value.String)
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field idleTimeExpiredAt", values[0])
	} else if value.Valid {
		s.IdleTimeExpiredAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field lifeTimeExpiredAt", values[1])
	} else if value.Valid {
		s.LifeTimeExpiredAt = value.Time
	}
	values = values[2:]
	if len(values) == len(session.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_sessions", value)
		} else if value.Valid {
			s.user_sessions = new(int)
			*s.user_sessions = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Session.
func (s *Session) QueryUser() *UserQuery {
	return (&SessionClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Session.
// Note that, you need to call Session.Unwrap() before calling this method, if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return (&SessionClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", idleTimeExpiredAt=")
	builder.WriteString(s.IdleTimeExpiredAt.Format(time.ANSIC))
	builder.WriteString(", lifeTimeExpiredAt=")
	builder.WriteString(s.LifeTimeExpiredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session

func (s Sessions) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
